Binary files apex-1.6.8/apex.bin and work_1.6.8/apex.bin differ
Binary files apex-1.6.8/src/arch-arm/rom/apex.bin and work_1.6.8/src/arch-arm/rom/apex.bin differ
diff -purN apex-1.6.8/src/drivers/drv-nand.c work_1.6.8/src/drivers/drv-nand.c
--- apex-1.6.8/src/drivers/drv-nand.c	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/drivers/drv-nand.c	2009-05-28 16:17:42.000000000 -0700
@@ -59,7 +59,7 @@
 #include <drv-nand-base.h>
 #include "mach/drv-nand.h"
 
-//#define TALK
+#define TALK
 
 static void wait_on_busy (void);
 
@@ -265,7 +265,7 @@ const static struct nand_chip chips[] = 
   {  (1<<0) | (1<<1) | (1<<2) | (1<<3),
     { 0x20,    0xf1,    0x80,    0x15},	/* ST - 1 GiB (NAND01GW3B2AN6) */
     128*1024*1024, 128*1024, 2048 }, /* Addr 4 */
-  {  (1<<0) | (1<<1) | (1<<2) | (1<<3),
+  {  (1<<0) | (1<<3),
     { 0x2c,    0xac,    0x90,    0x15},	/* Micron */
     512*1024*1024, 128*1024, 2048 }, /* Addr 4 */
 
diff -purN apex-1.6.8/src/mach-lpc313x/drv-lpcnand.c work_1.6.8/src/mach-lpc313x/drv-lpcnand.c
--- apex-1.6.8/src/mach-lpc313x/drv-lpcnand.c	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/drv-lpcnand.c	2009-05-28 16:43:45.000000000 -0700
@@ -84,8 +84,6 @@ page accros block 4 & 5. 
 
 /* chip seclect to which NAND dvice is connected 0, 1, 2, or 3 */
 #define CURR_CS		0
-#define MICRON_MT29F2G08 1
-//#define SAMSUNG_K9K8G 1
 
 /* Timeouts for various NAND operations in msec */
 #define TIMEOUT_WAIT_RBY           10
@@ -105,7 +103,7 @@ static void nand_reset (void);
 static const NAND_BOOT_CFG_PARAMS_T chips[] = 
 {
 	/* Micron MT*/
-#if defined (MICRON_MT29F2G08)
+#if defined (CONFIG_MICRON_MT29F2G08)
 	{
 		.tag = "NANDflsh", //{'N', 'A', 'N', 'D', 'f', 'l', 's', 'h',},
 		.interface_width = 8,
@@ -113,7 +111,7 @@ static const NAND_BOOT_CFG_PARAMS_T chip
 		.page_size_in_32bit_words = 0x0200,
 		.pages_per_block = 0x0040,
 		.nbr_of_blocks = 0x0800,
-		.amount_of_address_bytes = 3,
+		.amount_of_address_bytes = 5,
 		.amount_of_erase_address_bytes = 3,
 		.support_read_terminate = 1,
 		.page_increment_byte_nr = 2,
@@ -121,15 +119,15 @@ static const NAND_BOOT_CFG_PARAMS_T chip
 		/* assuming 90MHz clock (1clock = 11ns)to NAND block */
 		/* Note, timing macros take clk +1 values. */
 		/* tsrd=3, tals=3, talh=1, tcls=3, tclh=1, */
-		.timing1 = NAND_TIM1_TSRD(2) | NAND_TIM1_TALS(2) | NAND_TIM1_TALH(0) | NAND_TIM1_TCLS(2) | NAND_TIM1_TCLH(0),
+		.timing1 = NAND_TIM1_TSRD(3) | NAND_TIM1_TALS(3) | NAND_TIM1_TALH(1) | NAND_TIM1_TCLS(3) | NAND_TIM1_TCLH(1),
 		/* tdrd=3, tebi=1, tch=1, tcs=4, treh=2, trp=4, twh=2, twp = 3*/
-		.timing2 = NAND_TIM2_TDRD(2) | NAND_TIM2_TEBI(0) | NAND_TIM2_TCH(0) | NAND_TIM2_TCS(3) | NAND_TIM2_TRH(1) |
-			NAND_TIM2_TRP(3) | NAND_TIM2_TWH(1) | NAND_TIM2_TWP(2),
+		.timing2 = NAND_TIM2_TDRD(3) | NAND_TIM2_TEBI(1) | NAND_TIM2_TCH(1) | NAND_TIM2_TCS(4) | NAND_TIM2_TRH(2) |
+			NAND_TIM2_TRP(4) | NAND_TIM2_TWH(2) | NAND_TIM2_TWP(3),
 		.ecc_mode = 5,
 		.id_mask = 0x6, /*except 2nd & 3rd byte check remains id bytes */
 	},
 #endif
-#if defined (SAMSUNG_K9K8G)
+#if defined (CONFIG_SAMSUNG_K9K8G)
 	{
 		.tag = "NANDflsh", //{'N', 'A', 'N', 'D', 'f', 'l', 's', 'h',},
 		.interface_width = 8,
@@ -137,7 +135,7 @@ static const NAND_BOOT_CFG_PARAMS_T chip
 		.page_size_in_32bit_words = 0x0200,
 		.pages_per_block = 0x0040,
 		.nbr_of_blocks = 0x0800,
-		.amount_of_address_bytes = 3,
+		.amount_of_address_bytes = 5,
 		.amount_of_erase_address_bytes = 3,
 		.support_read_terminate = 1,
 		.page_increment_byte_nr = 2,
@@ -147,8 +145,8 @@ static const NAND_BOOT_CFG_PARAMS_T chip
 		/* tsrd=2, tals=3, talh=1, tcls=3, tclh=2, */
 		.timing1 = NAND_TIM1_TSRD(2) | NAND_TIM1_TALS(3) | NAND_TIM1_TALH(1) | NAND_TIM1_TCLS(3) | NAND_TIM1_TCLH(2),
 		/* tdrd=2, tebi=1, tch=1, tcs=4, treh=2, trp=4, twh=2, twp = 3*/
-		.timing2 = NAND_TIM2_TDRD(2) | NAND_TIM2_TEBI(0) | NAND_TIM2_TCH(1) | NAND_TIM2_TCS(4) | NAND_TIM2_TRH(2) |
-			NAND_TIM2_TRP(3) | NAND_TIM2_TWH(2) | NAND_TIM2_TWP(2),
+		.timing2 = NAND_TIM2_TDRD(2) | NAND_TIM2_TEBI(1) | NAND_TIM2_TCH(1) | NAND_TIM2_TCS(4) | NAND_TIM2_TRH(2) |
+			NAND_TIM2_TRP(4) | NAND_TIM2_TWH(2) | NAND_TIM2_TWP(3),
 		.ecc_mode = 5,
 		.id_mask = 0x6, /*except 2nd & 3rd byte check remains id bytes */
 	},
@@ -169,6 +167,12 @@ static void nand_reset (void)
 	unsigned long time_start = timer_read ();
 	/* clear edge status */
 	volatile u32 status = NANDC_CHECK_STS;
+
+	/* following line is just avoid warning. status gets cleaed by reading
+	the register. */
+	if (status) 
+		status = 0;
+
 	NANDC_SET_CMD = NAND_Reset;
 	/* Wait for MLC NAND ready */
 	while (!(NANDC_CHECK_STS & NAND_CHK_STS_RB_EDGE(CURR_CS))) {
@@ -200,7 +204,7 @@ inline void lpcnand_address (unsigned lo
 	NANDC_SET_ADDR = ( page        & 0xff);
 	NANDC_SET_ADDR = ((page >>  8) & 0xff);
 
-	if (chip->amount_of_address_bytes > 2)
+	if (chip->amount_of_address_bytes > 4)
 		NANDC_SET_ADDR = ((page >> 16) & 0xff);
 }
 
@@ -229,24 +233,24 @@ now.
 static void lpcnand_init (void)
 {
 	unsigned short id[4];
-	u32 config = 0; //NAND_CFG_TL_512;
+	u32 config = NAND_CFG_DC;//NAND_CFG_ECGC; 
 
 	/* enable NAND clocks */
 	cgu_clk_en_dis(CGU_SB_NANDFLASH_S0_CLK_ID, 1);
-	cgu_clk_en_dis(CGU_SB_NANDFLASH_ECC_CLK_ID, 1);
 	cgu_clk_en_dis(CGU_SB_NANDFLASH_NAND_CLK_ID, 1);
 	cgu_clk_en_dis(CGU_SB_NANDFLASH_PCLK_ID, 1);
-	cgu_clk_en_dis(CGU_SB_NANDFLASH_AES_CLK_ID, 1);
+	cgu_clk_en_dis(CGU_SB_NANDFLASH_AES_CLK_ID, 0);
 
 	/* reset NAND module through CGU */
 	cgu_soft_reset_module(NANDFLASH_NAND_RESET_N_SOFT);
 	cgu_soft_reset_module(NANDFLASH_ECC_RESET_N_SOFT);
 	cgu_soft_reset_module(NANDFLASH_AES_RESET_N_SOFT); /* needed for LPC3153 & 54 parts only */
+	
+	cgu_clk_en_dis(CGU_SB_NANDFLASH_ECC_CLK_ID, 1);
 
 	/* NAND muxing */
 	SYS_MUX_NAND_MCI = 0;
 
-
 	/* select bank0*/
 	NANDC_SET_CE = NAND_SETCE_WP | NAND_SETCE_CV(CURR_CS);
 
@@ -305,7 +309,7 @@ static void lpcnand_init (void)
 		/* write the final config value */
 		NANDC_CFG = config;
 	}
-	printf ("\n* NAND flash");
+	printf ("\n* LPC-NAND flash");
 
 	if (chip)
 		printf (" %d MiB total, %d KiB erase, %d B page"
@@ -450,6 +454,9 @@ static ssize_t lpcnand_write (struct des
 			if (towrite < NANDC_BUF_SZ)
 				memset(buf + towrite, 0xFF, NANDC_BUF_SZ - towrite);
 
+			/*When 512-516 bytes are written it will trigger ECC computation.*/
+			*((u32*)(buf + NANDC_BUF_SZ)) = 0xFFFFFFFF;
+
 			DBG(2, "sub-page pv:0x%08x towrite:0x%08x\n", (u32)pv, towrite);
 			pv += towrite;
 			available -= towrite;
@@ -574,6 +581,96 @@ static __service_6 struct service_d lpcn
 #endif
 };
 
+static void write_badblock_list(void)
+{
+	u32* bad_list_buf = (u32*)EXT_SDRAM_PHYS;
+	char* buff_ptr;
+	u32 temp_buff[2];
+	int curr_pos = 0;
+	int magic_word_pos;
+	int page_nr;
+	int cBad = 0;
+	struct descriptor_d desc;
+
+	DBG (1, "before memset buf:0x%08x len:%d\n", (u32)bad_list_buf, NANDFLASH_BADBLOCK_LIST_LENGTH * 4);
+
+	/* fill buffer with 0xFF */
+	memset((void*)bad_list_buf, 0xFF, NANDFLASH_BADBLOCK_LIST_LENGTH * 4);
+	
+	DBG (1, "memset done page:%d / %d\n", chip->pages_per_block, chip->nbr_of_blocks);
+	cBad = 0;
+	/* build bad block list page */
+	for (page_nr = chip->pages_per_block; 
+		page_nr < (chip->nbr_of_blocks * chip->pages_per_block); 
+		page_nr += chip->pages_per_block) {
+
+		DBG (1, "page_nr:%d \r", page_nr);
+		/* reset nand device */
+		nand_reset ();
+		/* index to spare area */
+		lpcnand_read_setup(page_nr, chip->page_size_in_bytes); 
+		if (NANDC_READ_DATA != 0xFF) {
+			printf ("Block %d bad\n", page_nr/chip->pages_per_block);
+			++cBad;
+			*((u32*)(bad_list_buf + cBad)) = page_nr/chip->pages_per_block;
+			if (cBad > NANDFLASH_BADBLOCK_LIST_LENGTH)
+				break;
+		}
+	}
+	/* update bad block count */
+	*bad_list_buf = cBad;
+
+	curr_pos = 0;
+	page_nr = 1;
+	while (curr_pos < (cBad + 1)) {
+
+		if ( (cBad + 1 - curr_pos) < (chip->page_size_in_32bit_words - 2)) {
+			magic_word_pos = cBad + 1;
+		}
+		else {
+			magic_word_pos = curr_pos + chip->page_size_in_32bit_words - 2;
+		}
+		DBG (1, "curr_pos:%d, cBad:%d, magic_pos:%d\n", curr_pos, cBad, magic_word_pos);
+
+		/* save last 2 words in current page to write with magic id & CRC.
+		Not needed if CBad < (chip->page_size_in_32bit_words - 2)*/
+		temp_buff[0] = bad_list_buf[magic_word_pos];
+		temp_buff[1] = bad_list_buf[magic_word_pos + 1];
+
+		/* insert magic word */
+		buff_ptr = (char*)&bad_list_buf[magic_word_pos];
+		buff_ptr[0] = 'B';
+		buff_ptr[1] = 'A';
+		buff_ptr[2] = 'D';
+		buff_ptr[3] = (char)(page_nr & 0xFF);
+
+		/* compute CRC32 */
+		bad_list_buf[magic_word_pos + 1] = crc32_compute((u8*)&bad_list_buf[curr_pos], 
+			((u32)&buff_ptr[4] - (u32)&bad_list_buf[curr_pos]));
+
+		/* create the nand descriptor for write routine */
+		desc.index = 0;
+		desc.start = page_nr * chip->page_size_in_bytes;
+		desc.length = chip->page_size_in_bytes;
+
+		DBG (1, "buff_ptr:0x%08x, start:0x%08x, page_nr:%d\n", (u32)buff_ptr, desc.start, page_nr);
+
+		/* write the bad page */
+		if (lpcnand_write (&desc, (void*)(bad_list_buf + curr_pos), 
+			chip->page_size_in_bytes) < chip->page_size_in_bytes) {
+			printf ("Write bad block page %d failed\n", page_nr);
+			return;
+		}
+		
+		/*put back last 2 words*/
+		bad_list_buf[magic_word_pos] = temp_buff[0];
+		bad_list_buf[magic_word_pos + 1] = temp_buff[1];
+		/* move to next page */
+		page_nr++;
+		/* update current position in bad block list */
+		curr_pos = magic_word_pos;
+	}
+}
 
 int cmd_lpcnand (int argc, const char** argv)
 {
@@ -587,8 +684,6 @@ int cmd_lpcnand (int argc, const char** 
 
 	if (PARTIAL_MATCH (argv[1], "f", "ormat") == 0) {
 
-		u8* cptr;
-
 		/* erase block 0 */
 		NANDC_IRQ_STS_RAW = NAND_IRQ_RB_POS_EDGE(CURR_CS);
 		NANDC_SET_CMD = NAND_Erase;
@@ -600,7 +695,7 @@ int cmd_lpcnand (int argc, const char** 
 		/* Send page program command  */
 		NANDC_SET_CMD = NAND_PageProgram;
 		lpcnand_address (0, 0);
-		/* set HW flow control to read the page and do ECC */
+		/* set HW flow control to write the page and do ECC */
 		NANDC_IRQ_STS_RAW = 0xFFFFFFFF;
 		/* build param page */
 		ptr = (g_curr_buf)?(void*)NANDC_RAM1_PHYS:(void*)NANDC_RAM0_PHYS;
@@ -614,9 +709,11 @@ int cmd_lpcnand (int argc, const char** 
 
 		DBG (1, "crc 0x%08x / 0x%08x\n",  
 			*((u32*)(ptr + (NANDC_BUF_SZ - 4))), (u32)(ptr + (NANDC_BUF_SZ - 4)));
-		/* fill rest of the sub-page. When 512th byte is written it will trigger ECC computation.*/
+		/* fill rest of the sub-page.*/ 
 		memset(ptr + LPC313x_NAND_BPARAM_PAGE_SZ, 
 			0xFF, (NANDC_BUF_SZ - LPC313x_NAND_BPARAM_PAGE_SZ));
+		/*When 512-516 bytes are written it will trigger ECC computation.*/
+		*((u32*)(ptr + NANDC_BUF_SZ)) = 0xFFFFFFFF;
 
 		/* see if ECC check is enabled */
 		if (NANDC_CFG & NAND_CFG_EC)
@@ -637,64 +734,8 @@ int cmd_lpcnand (int argc, const char** 
 			return 0;
 		}
 
-		/***######################################### 
-		This implementation assume the NAND chip has less than 125 bad blocks. 
-		If you expect more change the code below . 
-		#############################################***/
-		/* write bad block page */
-		ptr = (g_curr_buf)?(void*)NANDC_RAM1_PHYS:(void*)NANDC_RAM0_PHYS;
-		cBad = 0;
-		/* build bad block list page */
-		for (page = 0; page < (chip->nbr_of_blocks * chip->pages_per_block); page += chip->pages_per_block) {
-			/* reset nand device */
-			nand_reset ();
-			lpcnand_read_setup(page, 2048); /* Large block */
-			{
-				if (NANDC_READ_DATA != 0xFF) {
-					printf ("Block %d bad\n", page/64);
-					++cBad;
-					*((u32*)(ptr + (cBad << 2))) = page/chip->pages_per_block;
-				}
-			}
-		}
-		/* update babd block count */
-		*((u32*)ptr) = cBad;
-
-		/* Send page program command  */
-		NANDC_SET_CMD = NAND_PageProgram;
-		lpcnand_address (1, 0);
-		/* set HW flow control to read the page and do ECC */
-		NANDC_IRQ_STS_RAW = 0xFFFFFFFF;
-		cptr = (char*)(ptr + ((cBad+1)<<2));
-		*cptr++ = 'B';
-		*cptr++ = 'A';
-		*cptr++ = 'D';
-		*cptr++ = 1;
-		
-		/* compute CRC32 */
-		*((u32*)cptr) = crc32_compute((u8*)ptr, ((u32)cptr - (u32)ptr));
-		memset((void*)(cptr + 4), 0xFF, (NANDC_BUF_SZ - ((cBad+3)* 4)));
-
-		/* see if ECC check is enabled */
-		if (NANDC_CFG & NAND_CFG_EC)
-			wait_on_int((g_curr_buf)?NAND_IRQ_ECC_ENC_RAM1:NAND_IRQ_ECC_ENC_RAM0, TIMEOUT_WAIT_PROGRAM);
-		/* write param page */
-		NANDC_CTRL_FLOW = (g_curr_buf)?NAND_CTRLFLW_WRITE_RAM1:NAND_CTRLFLW_WRITE_RAM0;
-		wait_on_int((g_curr_buf)?NAND_IRQ_WR_RAM1:NAND_IRQ_WR_RAM0, TIMEOUT_WAIT_PROGRAM);
-		/*toggle buff */
-		g_curr_buf ^= 1;
-			
-		NANDC_IRQ_STS_RAW = NAND_IRQ_RB_POS_EDGE(CURR_CS);
-		NANDC_SET_CMD = NAND_PageProgramConfirm;
-		wait_on_int(NAND_IRQ_RB_POS_EDGE(CURR_CS), TIMEOUT_WAIT_PROGRAM);
-		/* check status */
-		NANDC_SET_CMD = NAND_Status;
-		udelay(5);// Wait for tWHR
-		if (NANDC_READ_DATA & NAND_Fail) {
-			printf ("Write bad block list page failed\n");
-			return 0;
-		}
-
+		/* now write bad block list page */
+		write_badblock_list();
 	}
 
 	if (PARTIAL_MATCH (argv[1], "s", "can") == 0) {
@@ -704,7 +745,7 @@ int cmd_lpcnand (int argc, const char** 
 		for (page = 0; page < (chip->nbr_of_blocks * chip->pages_per_block); page += chip->pages_per_block) {
 			/* reset nand device */
 			nand_reset ();
-			lpcnand_read_setup(page, 2048); /* Large block */
+			lpcnand_read_setup(page, chip->page_size_in_bytes); /* index to spare area */
 			{
 				if (NANDC_READ_DATA != 0xFF) {
 					printf ("Block %d bad\n", page/64);
diff -purN apex-1.6.8/src/mach-lpc313x/drv-nandc.c work_1.6.8/src/mach-lpc313x/drv-nandc.c
--- apex-1.6.8/src/mach-lpc313x/drv-nandc.c	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/drv-nandc.c	2009-05-27 16:37:18.000000000 -0700
@@ -18,6 +18,7 @@
 
 void nandsys_init(void)
 {
+#if 0
 	/* enable NAND clocks */
 	cgu_clk_en_dis(CGU_SB_NANDFLASH_S0_CLK_ID, 1);
 	cgu_clk_en_dis(CGU_SB_NANDFLASH_ECC_CLK_ID, 1);
@@ -42,10 +43,11 @@ void nandsys_init(void)
 //	while (!(NANDC_CHECK_STS & NAND_CHK_STS_RB1_EDGE));
 
 	/* NAND timing */
-	NANDC_IRQ_TIMING1 = NAND_NANDTIMING1_DEFAULT;
-	NANDC_IRQ_TIMING2 = NAND_NANDTIMING2_DEFAULT;
+//	NANDC_IRQ_TIMING1 = NAND_NANDTIMING1_DEFAULT;
+//	NANDC_IRQ_TIMING2 = NAND_NANDTIMING2_DEFAULT;
 
 	/* enable the controller and de-assert nFCE */
 	NANDC_CFG = NAND_CFG_DC;
+#endif
 }
 
diff -purN apex-1.6.8/src/mach-lpc313x/drv-nand.h work_1.6.8/src/mach-lpc313x/drv-nand.h
--- apex-1.6.8/src/mach-lpc313x/drv-nand.h	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/drv-nand.h	2009-05-28 09:12:11.000000000 -0700
@@ -49,6 +49,9 @@ typedef struct
 
 /* ----- Globals */
 #define LPC313x_NAND_BPARAM_PAGE_SZ	256
+#define NANDFLASH_BADBLOCK_LIST_LENGTH 4094  //1 block = min 32 pages = min 16Kbytes (32x512bytes)
+                                             //=> 4094 blocks = min 64Mbytes (should be enough for the image)
+
 
 /* ----- Prototypes */
 
diff -purN apex-1.6.8/src/mach-lpc313x/ea313x_v1_config work_1.6.8/src/mach-lpc313x/ea313x_v1_config
--- apex-1.6.8/src/mach-lpc313x/ea313x_v1_config	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/ea313x_v1_config	2009-05-26 17:57:40.000000000 -0700
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: KERNELVERSION
-# Fri May 15 14:50:57 2009
+# Tue May 26 17:56:01 2009
 #
 CONFIG_ARM=y
 CONFIG_CPU_ARMV5=y
@@ -53,8 +53,11 @@ CONFIG_MACH_EA313x_V1=y
 # Platform Setup
 #
 CONFIG_OSC_FREQ=12000000
-CONFIG_AHB_DIV_RATIO=2
+CONFIG_PLL_180=y
+# CONFIG_PLL_270 is not set
 # CONFIG_USB_BOOT is not set
+CONFIG_MICRON_MT29F2G08=y
+# CONFIG_SAMSUNG_K9K8G is not set
 
 #
 # Commands
diff -purN apex-1.6.8/src/mach-lpc313x/ea313x_v2_config work_1.6.8/src/mach-lpc313x/ea313x_v2_config
--- apex-1.6.8/src/mach-lpc313x/ea313x_v2_config	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/ea313x_v2_config	2009-05-26 17:58:22.000000000 -0700
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: KERNELVERSION
-# Thu May 14 18:28:40 2009
+# Tue May 26 17:57:48 2009
 #
 CONFIG_ARM=y
 CONFIG_CPU_ARMV5=y
@@ -53,8 +53,11 @@ CONFIG_MACH_EA313x_V2=y
 # Platform Setup
 #
 CONFIG_OSC_FREQ=12000000
-CONFIG_AHB_DIV_RATIO=2
+CONFIG_PLL_180=y
+# CONFIG_PLL_270 is not set
 # CONFIG_USB_BOOT is not set
+CONFIG_MICRON_MT29F2G08=y
+# CONFIG_SAMSUNG_K9K8G is not set
 
 #
 # Commands
diff -purN apex-1.6.8/src/mach-lpc313x/initialize.c work_1.6.8/src/mach-lpc313x/initialize.c
--- apex-1.6.8/src/mach-lpc313x/initialize.c	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/initialize.c	2009-05-26 17:41:52.000000000 -0700
@@ -35,19 +35,26 @@
 #define PLL_180M  {CGU_FIN_SELECT_FFAST, 770,  27306, 98, 0, 32, 16, 0, 180000000}
 #else
 #define PLL_180M  {CGU_FIN_SELECT_FFAST, 770,  8191, 98, 0, 16,  8, 0, 180000000}
+#define PLL_270M  {CGU_FIN_SELECT_FFAST, 514, 19660, 98, 0, 48, 23, 0, 270000000}
 #endif
 
+#if defined(CONFIG_PLL_180)
+
 #define CUR_PLL_SET     PLL_180M
 #define HCLK          (90 * 1000000ull)
-
-#if (CONFIG_AHB_DIV_RATIO == 2)
 extern const CGU_CLKS_INIT_T g_cgu_default_clks_2;
 #define DEFAULT_CFG   &g_cgu_default_clks_2
-#elif (CONFIG_AHB_DIV_RATIO == 3)
+
+#elif defined(CONFIG_PLL_270)
+
+#define CUR_PLL_SET     PLL_270M
+#define HCLK          (90 * 1000000ull)
 extern const CGU_CLKS_INIT_T g_cgu_default_clks_3;
 #define DEFAULT_CFG   &g_cgu_default_clks_3
+
 #endif
 
+
 #define SDRAM_CHIP_MODE   _SBF(13, 0x23)
 
 const CGU_HPLL_SETUP_T const g_pll = CUR_PLL_SET;
diff -purN apex-1.6.8/src/mach-lpc313x/Kconfig work_1.6.8/src/mach-lpc313x/Kconfig
--- apex-1.6.8/src/mach-lpc313x/Kconfig	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/Kconfig	2009-05-26 17:55:52.000000000 -0700
@@ -34,6 +34,20 @@ config OSC_FREQ
 	depends on ARCH_LPC313X
 	help
 	  Change this if using crystal other than 12MHz. 
+choice
+	prompt "PLL frequency"
+	default PLL_180
+
+config PLL_180
+	bool "Set PLL/ARM frequency at 180MHz and AHB=90MHz"
+
+config PLL_270
+	bool "Set PLL/ARM frequency at 270MHz and AHB=90MHz."
+	help
+	  This frequency is garunteed only for LPC314x series with core
+	  voltage set to 1.3v. 
+
+endchoice
 
 config ATAG_PHYS
 	hex "Physical address for ATAGs list"
@@ -51,11 +65,6 @@ config ARCH_NUMBER
 	default 9998 if (MACH_EA313x_V1 || MACH_EA313x_V2)
 	default 9997 if (MACH_VAL3154)
 
-config AHB_DIV_RATIO
-	int
-	default 2 if (MACH_VAL3153)
-	default 2 if (MACH_EA313x_V1 || MACH_EA313x_V2 || MACH_VAL3154)
-
 config USB_BOOT
 	bool "Enable LPC313x USB boot method"
 	help
@@ -101,6 +110,18 @@ config RAMDISK_SIZE
 	  (a.k.a. initrd).  This is the size of the compressed initrd
 	  image.
 
+choice
+	prompt "LPC NAND device"
+	default MICRON_MT29F2G08
+
+config MICRON_MT29F2G08
+	bool "MICRON NAND MT29F2G08 device."
+
+config SAMSUNG_K9K8G
+	bool "SAMSUNG NAND K9K8G device."
+
+endchoice
+
 endmenu
 
 config MACH
diff -purN apex-1.6.8/src/mach-lpc313x/lpc313x_cgu_default.c work_1.6.8/src/mach-lpc313x/lpc313x_cgu_default.c
--- apex-1.6.8/src/mach-lpc313x/lpc313x_cgu_default.c	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/lpc313x_cgu_default.c	2009-05-26 17:40:20.000000000 -0700
@@ -202,7 +202,7 @@
 /*------------------------------------------------------------------------------------------
   Global variables:
  ------------------------------------------------------------------------------------------*/
-#if (CONFIG_AHB_DIV_RATIO == 3)
+#if defined(CONFIG_PLL_270)
 
 const CGU_CLKS_INIT_T const g_cgu_default_clks_3 =
 {
@@ -345,7 +345,7 @@ const CGU_CLKS_INIT_T const g_cgu_defaul
   }
 };
 
-#elif (CONFIG_AHB_DIV_RATIO == 2)
+#elif defined(CONFIG_PLL_180)
 
 const CGU_CLKS_INIT_T g_cgu_default_clks_2 =
 {
diff -purN apex-1.6.8/src/mach-lpc313x/lpc313x_cgu_driver.c work_1.6.8/src/mach-lpc313x/lpc313x_cgu_driver.c
--- apex-1.6.8/src/mach-lpc313x/lpc313x_cgu_driver.c	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/lpc313x_cgu_driver.c	2009-05-27 14:29:24.000000000 -0700
@@ -11,7 +11,13 @@
 
 */
 
+#include <linux/types.h>
+#include <linux/string.h>
 #include <apex.h>
+#include <command.h>
+#include <error.h>
+#include <linux/kernel.h>
+#include <config.h>
 #include "lpc313x.h"
 
 /***********************************************************************
@@ -904,6 +910,7 @@ void __section (.bootstrap) cgu_clk_set_
     case CGU_SB_SPI_CLK_GATED_ID:
     case CGU_SB_PCM_CLK_IP_ID:
     case CGU_SB_PWM_PCLK_REGS_ID:
+    //case CGU_SB_NANDFLASH_ECC_CLK_ID:
       if (enable)
       {
         CGU_SB->clk_pcr[clkid] |= CGU_SB_PCR_EXTEN_EN;
@@ -1090,3 +1097,38 @@ void __section (.bootstrap) cgu_soft_res
 
   CGU_CFG->resetn_soft[modId] = CGU_CONFIG_SOFT_RESET;
 }
+
+int cmd_clock (int argc, const char** argv)
+{
+	u32 clk_id = CGU_SYS_FIRST;
+	u32 end_id = (CGU_SYSCLK_O_LAST + 1);
+	char* str[2] = { "OFF", " ON"}; 
+
+	if (argc > 1) {
+
+		clk_id = simple_strtoul (argv[1], NULL, 0);
+		end_id = clk_id + 1;
+	}
+
+	while (clk_id < end_id)
+	{
+		printf ("clock[%02d] %s(PSR)/%s(PCR) : %d\r\n", clk_id, 
+			str[(CGU_SB->clk_psr[clk_id] & 0x1)], 
+			str[(CGU_SB->clk_pcr[clk_id] & 0x1)], 
+			cgu_get_clk_freq(clk_id));
+		clk_id++;
+	}
+
+	return 0;
+}
+
+static __command struct command_d c_clk = {
+	.command = "clock",
+	.func = cmd_clock,
+	COMMAND_DESCRIPTION ("Get clock speed")
+	COMMAND_HELP (
+	"clock [clk_id]\n"
+	" clk_id - Clock index 0 to 91\n"
+	" Dumps all clock speeds if nor parameter is passed.\n"
+	"\n")
+};
diff -purN apex-1.6.8/src/mach-lpc313x/val314x_config work_1.6.8/src/mach-lpc313x/val314x_config
--- apex-1.6.8/src/mach-lpc313x/val314x_config	1969-12-31 16:00:00.000000000 -0800
+++ work_1.6.8/src/mach-lpc313x/val314x_config	2009-05-26 17:59:23.000000000 -0700
@@ -0,0 +1,166 @@
+#
+# Automatically generated make config: don't edit
+# Linux kernel version: KERNELVERSION
+# Tue May 26 17:59:11 2009
+#
+CONFIG_ARM=y
+CONFIG_CPU_ARMV5=y
+CONFIG_CPU_ARM9=y
+CONFIG_CPU_ARM926T=y
+# CONFIG_ARCH_LH7952X is not set
+# CONFIG_ARCH_LH7A40X is not set
+# CONFIG_ARCH_IXP42X is not set
+# CONFIG_ARCH_S3C2410 is not set
+# CONFIG_ARCH_MX3 is not set
+# CONFIG_ARCH_ORION5X is not set
+CONFIG_ARCH_LPC313X=y
+# CONFIG_EXPERIMENTAL is not set
+# CONFIG_SMALL is not set
+
+#
+# General Setup
+#
+CONFIG_TARGET_DESCRIPTION="Unspecified target"
+CONFIG_CROSS_COMPILE="arm-linux-"
+CONFIG_AEABI=y
+# CONFIG_DRIVER_LONG_LONG_SIZE is not set
+CONFIG_CC_OPTIMIZE_FOR_SIZE=y
+# CONFIG_CC_OPTIMIZE_FOR_SPEED is not set
+# CONFIG_CC_NO_OPTIMIZATION is not set
+# CONFIG_STARTUP_UART is not set
+# CONFIG_DEBUG_LL is not set
+CONFIG_SPINNER=y
+CONFIG_ATAG=y
+# CONFIG_MMU is not set
+CONFIG_DISABLE_MMU_AT_BOOT=y
+CONFIG_SDRAMBOOT_REPORT=y
+CONFIG_STACK_SIZE=0x1000
+# CONFIG_BOOTSTRAP_MEMTEST is not set
+CONFIG_ATAG_PHYS=0x30000100
+CONFIG_ARCH_NUMBER=9999
+CONFIG_APEX_VMA=0x11029000
+CONFIG_KERNEL_LMA=0x30008000
+CONFIG_USE_RAMDISK=y
+CONFIG_RAMDISK_LMA=0x32000000
+CONFIG_MACH="lpc313x"
+CONFIG_RAMDISK_SIZE=0x00300000
+CONFIG_MACH_VAL3153=y
+# CONFIG_MACH_VAL3154 is not set
+# CONFIG_MACH_EA313x_V1 is not set
+# CONFIG_MACH_EA313x_V2 is not set
+
+#
+# Platform Setup
+#
+CONFIG_OSC_FREQ=12000000
+# CONFIG_PLL_180 is not set
+CONFIG_PLL_270=y
+# CONFIG_USB_BOOT is not set
+CONFIG_MICRON_MT29F2G08=y
+# CONFIG_SAMSUNG_K9K8G is not set
+
+#
+# Commands
+#
+CONFIG_ALLHELP=y
+CONFIG_ALPHABETIZE_COMMANDS=y
+CONFIG_PARTIAL_MATCHES=y
+CONFIG_DEL_IS_BS=y
+CONFIG_ANSI_KEYS=y
+CONFIG_COMMAND_HISTORY=y
+CONFIG_COMMAND_EDITING=y
+# CONFIG_TIME_COMMANDS is not set
+CONFIG_CMD_ALIAS=y
+CONFIG_CMD_CHECKSUM=y
+CONFIG_CMD_COPY=y
+CONFIG_CMD_COMPARE=y
+CONFIG_CMD_DRVINFO=y
+CONFIG_CMD_DUMP=y
+CONFIG_CMD_ENV=y
+CONFIG_CMD_IMAGE=y
+CONFIG_CMD_IMAGE_APEX=y
+# CONFIG_CMD_IMAGE_UBOOT is not set
+CONFIG_CMD_IMAGE_SHOW=y
+CONFIG_CMD_SETENV=y
+CONFIG_CMD_ERASE=y
+CONFIG_CMD_FILL=y
+CONFIG_CMD_GO=y
+CONFIG_CMD_INFO=y
+# CONFIG_CMD_PARSE is not set
+# CONFIG_CMD_PAUSE is not set
+# CONFIG_CMD_FLASHUSAGE is not set
+CONFIG_CMD_WAIT=y
+CONFIG_CMD_XRECEIVE=y
+# CONFIG_CMD_MEMLIMIT is not set
+# CONFIG_CMD_MEMSCAN is not set
+# CONFIG_CMD_MEMTEST is not set
+CONFIG_CMD_NAND=y
+# CONFIG_CRC32_LSB is not set
+
+#
+# Generic Drivers
+#
+CONFIG_DRIVER_FAT=y
+CONFIG_DRIVER_FAT_BLOCKDEVICE="mmc"
+CONFIG_DRIVER_EXT2=y
+CONFIG_DRIVER_EXT2_BLOCKDEVICE="mmc"
+# CONFIG_DRIVER_JFFS2 is not set
+# CONFIG_DRIVER_FIS is not set
+CONFIG_DRIVER_NAND=y
+# CONFIG_DRIVER_NAND_TYPE_TOSHIBA is not set
+# CONFIG_DRIVER_NAND_TYPE_ST is not set
+CONFIG_DRIVER_NAND_TYPE_MICRON=y
+CONFIG_DRIVER_NAND_ADDRESS_BYTES=2
+# CONFIG_DRIVER_ONENAND is not set
+CONFIG_DRIVER_CS8900=y
+CONFIG_USES_NAND=y
+CONFIG_USES_PATHNAME_PARSER=y
+CONFIG_USES_CS8900=y
+
+#
+# Ethernet Networking
+#
+CONFIG_ETHERNET=y
+CONFIG_CMD_IPCONFIG=y
+CONFIG_CMD_IPCONFIG_STATIC=y
+CONFIG_CMD_IPCONFIG_RARP=y
+# CONFIG_CMD_IPCONFIG_BOOTP is not set
+# CONFIG_CMD_IPCONFIG_DHCP is not set
+CONFIG_PROTO_ICMP_ECHO=y
+CONFIG_CMD_PING=y
+# CONFIG_CMD_ARP is not set
+CONFIG_CMD_TFTP=y
+CONFIG_USE_ETHERNET=y
+
+#
+# Environment
+#
+CONFIG_ENV=y
+CONFIG_ENV_MUTABLE=y
+CONFIG_ENV_REGION="lnand:512k+256k"
+# CONFIG_ENV_SAVEATONCE is not set
+CONFIG_ENV_CHECK_LEN=1024
+# CONFIG_VARIATIONS is not set
+CONFIG_NO_BOOTSTRAP=y
+# CONFIG_NOR_BOOT is not set
+# CONFIG_NAND_BOOT is not set
+# CONFIG_ONENAND_BOOT is not set
+# CONFIG_COMPANION_EVT1_BOOT is not set
+# CONFIG_COMPANION_EVT2_BOOT is not set
+CONFIG_ENV_STARTUP_PREFIX_P=y
+CONFIG_ENV_STARTUP_PREFIX="ipconfig rarp"
+
+#
+# Regions
+#
+CONFIG_ENV_REGION_KERNEL="tftp://$serverip/zImage"
+CONFIG_ENV_REGION_RAMDISK="tftp://$serverip/ramdisk_image.gz"
+
+#
+# Overrides
+#
+# CONFIG_ENV_DEFAULT_CMDLINE_OVERRIDE is not set
+CONFIG_ENV_DEFAULT_STARTUP_OVERRIDE=y
+CONFIG_ENV_DEFAULT_STARTUP="ipconfig rarp; copy $kernelsrc $bootaddr;copy $ramdisksrc $ramdiskaddr; boot"
+CONFIG_RELOCATE_SIMPLE=y
+CONFIG_ALIASES=y
diff -purN apex-1.6.8/src/mach-lpc313x/val3154_config work_1.6.8/src/mach-lpc313x/val3154_config
--- apex-1.6.8/src/mach-lpc313x/val3154_config	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/val3154_config	2009-05-27 11:13:24.000000000 -0700
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: KERNELVERSION
-# Thu May 14 18:27:24 2009
+# Wed May 27 11:13:10 2009
 #
 CONFIG_ARM=y
 CONFIG_CPU_ARMV5=y
@@ -53,8 +53,11 @@ CONFIG_MACH_VAL3154=y
 # Platform Setup
 #
 CONFIG_OSC_FREQ=12000000
-CONFIG_AHB_DIV_RATIO=2
-CONFIG_USB_BOOT=y
+CONFIG_PLL_180=y
+# CONFIG_PLL_270 is not set
+# CONFIG_USB_BOOT is not set
+# CONFIG_MICRON_MT29F2G08 is not set
+CONFIG_SAMSUNG_K9K8G=y
 CONFIG_HAS_ANALOG_DIE=y
 
 #
@@ -92,23 +95,17 @@ CONFIG_CMD_XRECEIVE=y
 # CONFIG_CMD_MEMLIMIT is not set
 # CONFIG_CMD_MEMSCAN is not set
 # CONFIG_CMD_MEMTEST is not set
-# CONFIG_CMD_NAND is not set
 # CONFIG_CRC32_LSB is not set
 
 #
 # Generic Drivers
 #
-CONFIG_DRIVER_FAT=y
-CONFIG_DRIVER_FAT_BLOCKDEVICE="mmc"
+# CONFIG_DRIVER_FAT is not set
 CONFIG_DRIVER_EXT2=y
 CONFIG_DRIVER_EXT2_BLOCKDEVICE="mmc"
 # CONFIG_DRIVER_JFFS2 is not set
 # CONFIG_DRIVER_FIS is not set
-CONFIG_DRIVER_NAND=y
-CONFIG_DRIVER_NAND_TYPE_TOSHIBA=y
-# CONFIG_DRIVER_NAND_TYPE_ST is not set
-# CONFIG_DRIVER_NAND_TYPE_MICRON is not set
-CONFIG_DRIVER_NAND_ADDRESS_BYTES=2
+# CONFIG_DRIVER_NAND is not set
 # CONFIG_DRIVER_ONENAND is not set
 CONFIG_USES_NAND=y
 CONFIG_USES_PATHNAME_PARSER=y
diff -purN apex-1.6.8/src/mach-lpc313x/val315x_config work_1.6.8/src/mach-lpc313x/val315x_config
--- apex-1.6.8/src/mach-lpc313x/val315x_config	2009-05-28 16:46:00.000000000 -0700
+++ work_1.6.8/src/mach-lpc313x/val315x_config	1969-12-31 16:00:00.000000000 -0800
@@ -1,163 +0,0 @@
-#
-# Automatically generated make config: don't edit
-# Linux kernel version: KERNELVERSION
-# Thu May 14 18:19:40 2009
-#
-CONFIG_ARM=y
-CONFIG_CPU_ARMV5=y
-CONFIG_CPU_ARM9=y
-CONFIG_CPU_ARM926T=y
-# CONFIG_ARCH_LH7952X is not set
-# CONFIG_ARCH_LH7A40X is not set
-# CONFIG_ARCH_IXP42X is not set
-# CONFIG_ARCH_S3C2410 is not set
-# CONFIG_ARCH_MX3 is not set
-# CONFIG_ARCH_ORION5X is not set
-CONFIG_ARCH_LPC313X=y
-# CONFIG_EXPERIMENTAL is not set
-# CONFIG_SMALL is not set
-
-#
-# General Setup
-#
-CONFIG_TARGET_DESCRIPTION="Unspecified target"
-CONFIG_CROSS_COMPILE="arm-linux-"
-CONFIG_AEABI=y
-# CONFIG_DRIVER_LONG_LONG_SIZE is not set
-CONFIG_CC_OPTIMIZE_FOR_SIZE=y
-# CONFIG_CC_OPTIMIZE_FOR_SPEED is not set
-# CONFIG_CC_NO_OPTIMIZATION is not set
-# CONFIG_STARTUP_UART is not set
-# CONFIG_DEBUG_LL is not set
-CONFIG_SPINNER=y
-CONFIG_ATAG=y
-# CONFIG_MMU is not set
-CONFIG_DISABLE_MMU_AT_BOOT=y
-CONFIG_SDRAMBOOT_REPORT=y
-CONFIG_STACK_SIZE=0x1000
-# CONFIG_BOOTSTRAP_MEMTEST is not set
-CONFIG_ATAG_PHYS=0x30000100
-CONFIG_ARCH_NUMBER=9999
-CONFIG_APEX_VMA=0x11029000
-CONFIG_KERNEL_LMA=0x30008000
-CONFIG_USE_RAMDISK=y
-CONFIG_RAMDISK_LMA=0x32000000
-CONFIG_MACH="lpc313x"
-CONFIG_RAMDISK_SIZE=0x00300000
-CONFIG_MACH_VAL3153=y
-# CONFIG_MACH_VAL3154 is not set
-# CONFIG_MACH_EA313x_V1 is not set
-# CONFIG_MACH_EA313x_V2 is not set
-
-#
-# Platform Setup
-#
-CONFIG_OSC_FREQ=12000000
-CONFIG_AHB_DIV_RATIO=2
-# CONFIG_USB_BOOT is not set
-
-#
-# Commands
-#
-CONFIG_ALLHELP=y
-CONFIG_ALPHABETIZE_COMMANDS=y
-CONFIG_PARTIAL_MATCHES=y
-CONFIG_DEL_IS_BS=y
-CONFIG_ANSI_KEYS=y
-CONFIG_COMMAND_HISTORY=y
-CONFIG_COMMAND_EDITING=y
-# CONFIG_TIME_COMMANDS is not set
-CONFIG_CMD_ALIAS=y
-CONFIG_CMD_CHECKSUM=y
-CONFIG_CMD_COPY=y
-CONFIG_CMD_COMPARE=y
-CONFIG_CMD_DRVINFO=y
-CONFIG_CMD_DUMP=y
-CONFIG_CMD_ENV=y
-CONFIG_CMD_IMAGE=y
-CONFIG_CMD_IMAGE_APEX=y
-# CONFIG_CMD_IMAGE_UBOOT is not set
-CONFIG_CMD_IMAGE_SHOW=y
-CONFIG_CMD_SETENV=y
-CONFIG_CMD_ERASE=y
-CONFIG_CMD_FILL=y
-CONFIG_CMD_GO=y
-CONFIG_CMD_INFO=y
-# CONFIG_CMD_PARSE is not set
-# CONFIG_CMD_PAUSE is not set
-# CONFIG_CMD_FLASHUSAGE is not set
-CONFIG_CMD_WAIT=y
-CONFIG_CMD_XRECEIVE=y
-# CONFIG_CMD_MEMLIMIT is not set
-# CONFIG_CMD_MEMSCAN is not set
-# CONFIG_CMD_MEMTEST is not set
-CONFIG_CMD_NAND=y
-# CONFIG_CRC32_LSB is not set
-
-#
-# Generic Drivers
-#
-CONFIG_DRIVER_FAT=y
-CONFIG_DRIVER_FAT_BLOCKDEVICE="mmc"
-CONFIG_DRIVER_EXT2=y
-CONFIG_DRIVER_EXT2_BLOCKDEVICE="mmc"
-# CONFIG_DRIVER_JFFS2 is not set
-# CONFIG_DRIVER_FIS is not set
-CONFIG_DRIVER_NAND=y
-# CONFIG_DRIVER_NAND_TYPE_TOSHIBA is not set
-# CONFIG_DRIVER_NAND_TYPE_ST is not set
-CONFIG_DRIVER_NAND_TYPE_MICRON=y
-CONFIG_DRIVER_NAND_ADDRESS_BYTES=2
-# CONFIG_DRIVER_ONENAND is not set
-CONFIG_DRIVER_CS8900=y
-CONFIG_USES_NAND=y
-CONFIG_USES_PATHNAME_PARSER=y
-CONFIG_USES_CS8900=y
-
-#
-# Ethernet Networking
-#
-CONFIG_ETHERNET=y
-CONFIG_CMD_IPCONFIG=y
-CONFIG_CMD_IPCONFIG_STATIC=y
-CONFIG_CMD_IPCONFIG_RARP=y
-# CONFIG_CMD_IPCONFIG_BOOTP is not set
-# CONFIG_CMD_IPCONFIG_DHCP is not set
-CONFIG_PROTO_ICMP_ECHO=y
-CONFIG_CMD_PING=y
-# CONFIG_CMD_ARP is not set
-CONFIG_CMD_TFTP=y
-CONFIG_USE_ETHERNET=y
-
-#
-# Environment
-#
-CONFIG_ENV=y
-CONFIG_ENV_MUTABLE=y
-CONFIG_ENV_REGION="lnand:512k+256k"
-# CONFIG_ENV_SAVEATONCE is not set
-CONFIG_ENV_CHECK_LEN=1024
-# CONFIG_VARIATIONS is not set
-CONFIG_NO_BOOTSTRAP=y
-# CONFIG_NOR_BOOT is not set
-# CONFIG_NAND_BOOT is not set
-# CONFIG_ONENAND_BOOT is not set
-# CONFIG_COMPANION_EVT1_BOOT is not set
-# CONFIG_COMPANION_EVT2_BOOT is not set
-CONFIG_ENV_STARTUP_PREFIX_P=y
-CONFIG_ENV_STARTUP_PREFIX="ipconfig rarp"
-
-#
-# Regions
-#
-CONFIG_ENV_REGION_KERNEL="tftp://$serverip/zImage"
-CONFIG_ENV_REGION_RAMDISK="tftp://$serverip/ramdisk_image.gz"
-
-#
-# Overrides
-#
-# CONFIG_ENV_DEFAULT_CMDLINE_OVERRIDE is not set
-CONFIG_ENV_DEFAULT_STARTUP_OVERRIDE=y
-CONFIG_ENV_DEFAULT_STARTUP="ipconfig rarp; copy $kernelsrc $bootaddr;copy $ramdisksrc $ramdiskaddr; boot"
-CONFIG_RELOCATE_SIMPLE=y
-CONFIG_ALIASES=y
